
= Atividades PDI DCA0445 =
 Aluno: Luiz Carlos Abott Galvão Neto

== Considerações iniciais == 

Esta página foi criada para a exibição das atividades realizadas pelo aluno Luiz Carlos Abbott Galvão Neto na disciplina de Processamento Digital de Imagens (DCA0445) ministrada pelo professor Agostinho Brito durante o semestre 2018.1. Para compilar e executar os programas aqui apresentados é necessário salvar os arquivos .cpp juntamente com o arquivo link:https://LuizCarlosAbbott.github.io/codigos/Makefile[Makefile] em um diretório e executar a seguinte seqüência de comandos no linux:
....
$ make <Nome_do_arquivo_cpp>
$ ./<Nome_do_arquivo_cpp>
....

== Exercício 1: Regions == 

Foi utilizada a seguinte imagem para este exercício.

[#image-perna]
.pernapato.jpeg
image::imagens/pernapato.jpeg[]

Nesta atividade foi pedido para desenvolver um programa que pedisse ao usuário dois pontos para fazer uma região onde a imagem seria negativa, a imagem foi colocado em grayscale para ser desenvolvido o exercício.

[[exa_regions, Regions]]
.regions.cpp
[source,cpp]
----
include::codigos/regions.cpp[]
---- 

Acima temos o código que foi desenvolvido a partir do exemplo disponibilizado pelo professor Agostinho link:https://github.com/agostinhobritojr/agostinhobritojr.github.io/blob/master/tutoriais/pdi/exemplos/pixels.cpp[pixels.cpp].

[#image-perna]
.terminalregions.png
image::imagens/terminalregions.png[]

Executando os comandos no terminal obtemos a seguinte imagem.

[#image-perna]
.pernapatoneg.png
image::imagens/pernapatoneg.png[]

== Exercício 1.1: Troca Regions == 

A imagem pernapato.jpeg também foi utilizada para resolver este exercício.

[#image-pernajpeg]
.pernapato.jpeg
image::imagens/pernapato.jpeg[]

Para resolução deste exercício tomei por base o código anterior *regions.cpp*, dividi a imagem em 4 quadrantes e utilizei uma imagem auxiliar para fazer a troca dos quadrantes.

[[exa_trocaregions, TrocaRegions]]
.trocaregions.cpp
[source,cpp]
----
include::codigos/trocaregions.cpp[]
---- 

[#image-terminaltroca]
.terminaltroca.png
image::imagens/terminaltroca.png[]

Executando o código no terminal obtive a seguinte:

[#image-pernapng]
.pernapato.png
image::imagens/pernapato.png[]

== Exercício 2: Labeling == 

Depois que o contador ultrapassar o nível de cinza 255, todos os objetos que passarem pelo processamento do floodFill terão seus níveis de cinza iguais a 255.

== Exercício 2.1: Labeling == 

Insira o texto aqui

[[exa_labeling, Bolhas&Objetos]]
.labeling.cpp
[source,cpp]
----
include::codigos/labeling.cpp[]
---- 

Insira o texto aqui

[#image-bolha]
.terminalbolha.png
image::imagens/terminalbolha.png[]

[#image-bolhaburaco]
.bolhasburaco.png
image::imagens/bolhasburaco.png[]

== Exercício 3: Equalize ==

Para está atividade foi utilizado parte do código disponibilizado pelo professor  link:https://github.com/agostinhobritojr/agostinhobritojr.github.io/blob/master/tutoriais/pdi/exemplos/histogram.cpp[histogram.cpp]  e também uma função do OpenCV link:https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html[equalizeHist()] com eles foi possível equalizar a imagem da câmera em tempo real.
[[exa_equalize, Equalize]]
.equalize.cpp
[source,cpp]
----
include::codigos/equalize.cpp[]
---- 

[#image-Equalize]
.equalize.png
image::imagens/equalize.png[]

== Exercício 3.1: Motion detector ==



== Exercício 4: Laplaciano do gaussiano ==


